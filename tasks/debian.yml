- name: Ensure old docker packages are not installed.
  ansible.builtin.apt:
    name:
      - docker
      - docker-engine
      - docker.io
      - containerd
      - runc
    state: absent

- name: Install apt dependencies.
  ansible.builtin.apt:
    name:
      - apt-transport-https
      - ca-certificates
      - curl
      - lsb-release
    state: present

- name: Install apt dependencies (old Ubuntu and Debian).
  ansible.builtin.apt:
    name: gnupg2
    state: present
  when: ansible_distribution != 'Ubuntu' or ansible_distribution_version is version('20.04', '<')

- name: Install apt dependencies (Ubuntu >= 20.04).
  ansible.builtin.apt:
    name: gnupg
    state: present
  when: ansible_distribution == 'Ubuntu' or ansible_distribution_version is version('20.04', '>=')

- name: Add apt key for Docker repository.
  ansible.builtin.apt_key:
    url: "https://download.docker.com/linux/{{ ansible_distribution | lower }}/gpg"
    id: 9DC858229FC7DD38854AE2D88D81803C0EBFCD88
    state: present
  ignore_errors: true
  register: add_apt_key

- name: Add apt key for Docker repository (fallback).
  shell: |
    set -euf -o pipefail
    curl -sSL "https://download.docker.com/linux/{{ ansible_distribution | lower }}/gpg" | sudo apt-key add -
  args:
    executable: /bin/bash
  when: add_apt_key is failed

- name: Get architecture.
  ansible.builtin.command: dpkg --print-architecture
  register: dpkg_architecture
  changed_when: false

- name: Register Docker repository.
  ansible.builtin.apt_repository:
    repo: "deb [arch={{ dpkg_architecture.stdout }}] https://download.docker.com/linux/{{ ansible_distribution | lower }} {{ ansible_distribution_release }} stable"
    state: present

- name: Install Docker packages.
  ansible.builtin.apt:
    name:
      - docker-ce
      - docker-ce-cli
      - containerd.io
    state: present
  notify: Restart Docker.

- name: Ensure Docker is started and enabled at boot.
  ansible.builtin.service:
    name: docker
    state: started
    enabled: true
